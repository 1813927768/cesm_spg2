g5 = [21.026085686367026, 241.89235749406026, 89.37840389520093, 272.8349088185925, 709.7309694652015, 78.84622792997963, 700.8117858062748, 168.5294714235915, 200.70653633285815, 105.32574575019585, 331.68341536613417, 37.47020814135148, -28.378169015162083, 261.56211283131137, 205.70413311392443, 340.28491294443705, 620.281128750105, 35.428091345365544, 16.671159245934348, -32.54010517375186, 106.42100242606507, -124.3079693330511, 11.425129341971617, 77.4182968990233, 127.29773575727053, 130.4700377191153, 386.7996512800974, -103.23090062268133, 163.79200757917943, 28.87632866319121, -6.136961385057564, -8606.383675268067, -5.878069563011204, -10.677819309115266, 111.35445735786152, 25.231632882472713, 61.53905888344551, 148.53932420220593, -85.07579632894878, 181.6620864290269, 272.55327086582855, 104.64813329868102, 3.780782617686076, -204.41031161888893, 240.50733011981197, 110.7267682404551, 65.99109698194283, 129.14882064788415, 357.6127063313273, -58.60034760404422]
g4 = [-8.674332111583194, 85.68963659307222, -12.364159834717057, 105.97495536719221, 228.09345550739556, 22.864895908465922, 119.6320147861895, 74.47541918635633, -2.1470479758646497, 84.16475258906215, 101.30352496275688, -752.0016198965305, 146.50415874510307, 841.6123485687735, -82.39299605525115, 58.71380601799753, 628.9977405474933, 231.12714398101218, 3.1869675961567854, -31.997881811216537, 213.14409463218635, -35.484160813629885, 63.19461462666204, 37.49602011934882, 160.97260547525067, 224.98010406075272, -122.24507767253326, 34.52333537207908, 67.16953252153246, 63.9086107637837, -82.17129910937395, 2381.9765400046876, 24.6978536360602, 68.20489111195992, -21.99859667493558, 78.58585963884558, 440.2942108312227, 204.00058551631184, 27.263094975017804, 1.8306964760469644, 179.68220263477082, 557.618998918931, 63.75411367714048, 53.42171466491211, 95.66226582123113, 212.46846022877304, 50.49632411325478, 281.7575030807869, -411.8563169773369, 92.86106982461224]
fcnorm = [1.4033705894024606, 0.7023752934326978, 0.70223419771222, 0.7017788257697725, 0.6908230851663665, 0.6907981036503831, 0.6909187004155717, 0.6907207585943749, 0.6696731494341229, 0.6692000311338541, 0.6277050279501225, 0.3138923785422734, 0.3138481662280049, 0.31384551022039214, 0.2943144917653404, 0.2209027209323826, 0.22115087642093478, 0.22175726462531897, 0.2209325173306532, 0.165758174634267, 0.14482874518230515, 0.14500624830753192, 0.07258348279623389, 0.06361528113828363, 0.06363375633389559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
fvalue = [-1.1615340852247882, -1.2713199140460278, -1.1870094150201165, -1.2565438405704312, -1.1692338957476858, -1.1773198300216619, -1.3132078932850237, -1.2493171263996128, -1.1666282360656923, -1.2048094216582923, -1.1881027881579083, -1.1927334505596843, -1.2496468128993365, -1.2042322013010744, -1.2101081480790032, -1.18844728037425, -1.2348880808072982, -1.2829305783807503, -1.412252762716099, -1.2153512096087762, -1.2208917774756776, -1.2674815840241418, -1.2138497906468846, -1.2153952120509288, -1.2209129121426443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
g1 = [1969.6894944322232, 466.59833215682977, 1218.7767870781731, 3199.4137019290015, 7107.523380033955, 2937.3359539345906, 13807.441227159727, 7257.887580981281, -1349.764371052466, 3048.2199307013047, 375.75234096347356, -2139.6794634646117, -1950.613766408021, 6369.2372800132, 3950.7917096135316, 10323.733689599565, -879.0856580795478, 4805.458083841895, 960.710641984713, -2682.0383769509494, 2698.8594158342853, 705.3453359331103, -117.13016272330188, -4128.378498595175, -885.0933659313738, -2574.814218693117, 1364.07682310344, 1845.7215739054036, -6754.425159056965, 465.6325247390055, -318.28132179653835, -1845.4187808503486, 550.2655939031406, 3376.125771270149, 1448.9235721036866, 1998.7584179171336, 7924.4462569828775, 697.1055317287501, 3073.4924139302116, 4472.92398325045, -1960.302400888263, 8256.907836780672, 331.5307151388724, 5715.623280838137, 2697.7962790595875, 2728.8829097113, 588.5718521512587, 7053.904036180152, 15705.882977495914, 1333.9205546114256]
g = [-2.074842028355672, 183.4701871338924, 163.93355259502016, 679.2826572692373, 639.9945339542769, 148.3001823348736, 1648.159806959142, 434.65205323077606, 193.52105647646258, 725.2625247573163, -987.9152860297002, 2733.857471898465, 551.4615140670868, -411.84193855940714, 1075.8450001668841, 1341.1800376461115, -490.47069973284823, 542.8342475274976, 40.379833122833254, 306.12186027218667, 133.54988412097825, 291.09034977795255, 132.38515090445267, 9.878821939155802, 8.215799617250799, 295.4604150545904, 425.64903712455987, 280.39667114873123, 1290.0387853440425, -134.54925974486315, 234.97739785948812, -782.1111437008967, 272.6765354079707, 118.8083615075522, 429.3663263621813, 316.30731937936815, 777.7055480721795, 80.35846566375217, -607.7737850800011, -12.27404347344831, 422.01962355448984, 1568.8342383084541, 124.06981501199652, 695.6742747613321, 246.4450354278308, 81.23373925920868, 456.75052576606754, 365.0543329410988, 3022.0954913375144, 429.0621479358274]


import numpy as np
import netCDF4 as nc
import matplotlib.pyplot as plt
import json,csv


# reduction = []
# reader = csv.reader(open(r'F:\current\实验室\学姐——李\必要文件\reductions_T_w.csv', "r"))
# for line in reader:
#     lineArr = [float(n.strip()) for n in line]
#     reduction.append(lineArr)

def bit_product_sum(x, y):
    return sum([item[0] * item[1] for item in zip(x, y)])


def cosine_similarity(x, y, norm=False):
    """ 计算两个向量x和y的余弦相似度 """
    assert len(x) == len(y), "len(x) != len(y)"
    zero_list = [0] * len(x)
    if x == zero_list or y == zero_list:
        return float(1) if x == y else float(0)

    # method 1
    res = np.array([[x[i] * y[i], x[i] * x[i], y[i] * y[i]] for i in range(len(x))])
    cos = sum(res[:, 0]) / (np.sqrt(sum(res[:, 1])) * np.sqrt(sum(res[:, 2])))

    # method 2
    # cos = bit_product_sum(x, y) / (np.sqrt(bit_product_sum(x, x)) * np.sqrt(bit_product_sum(y, y)))

    # method 3
    # dot_product, square_sum_x, square_sum_y = 0, 0, 0
    # for i in range(len(x)):
    #     dot_product += x[i] * y[i]
    #     square_sum_x += x[i] * x[i]
    #     square_sum_y += y[i] * y[i]
    # cos = dot_product / (np.sqrt(square_sum_x) * np.sqrt(square_sum_y))

    return 0.5 * cos + 0.5 if norm else cos  # 归一化到[0, 1]区间内


def plot(arr):
    arr = list(filter(lambda x:x!=0,arr))
    plt.xlim((0, len(arr))) 
    xTicks = np.arange(0, len(arr), 1)
    plt.xticks(xTicks)
    plt.plot(range(len(arr)),arr)

def read_result():
    gs = []
    with open("log/result_min_1110.txt", 'r') as f:
        for line in f.readlines():
            if line.strip() == "":
                continue
            parts = line.split("=")
            head = parts[0].strip()
            body = json.loads(parts[1])
            if head == "g":
                gs.append(body)
    return gs

def get_norm(arr):
    return map(lambda x:np.linalg.norm(np.array(x)),arr)

def pca_dd(fileName = "-1.954_per_1125.nc"):
    '''
    use reduction matrix to reduce dimention
    '''
    best = nc.Dataset('result/%s'%(fileName), mode='r')
    PT = best.variables['T_per'][:]
    rP = np.dot(np.array(reduction),PT.flatten())
    best.close()
    return rP

def pca_rc():
    cur_file = nc.Dataset('result/-1.954_per_1125.nc', mode='r')
    lat = cur_file.variables['lat'][:]
    lev = cur_file.variables['lev'][:]
    lon = cur_file.variables['lon'][:]
    cur_file.close()
    x = pca_dd()
    ini = np.dot(np.array(x),np.array(reduction))
    level = 1
    row = 32
    column = 288
    writer = nc.Dataset('result/rc.nc', 'w', format='NETCDF4')
    writer.createDimension('lev', level)
    writer.createDimension('lat', row)
    writer.createDimension('lon', column)
    writer.createVariable("lev", 'd', ("lev"))
    writer.createVariable("lon", 'd', ("lon"))
    writer.createVariable("lat", 'd', ("lat"))
    writer.variables['lat'][:] = lat
    writer.variables['lon'][:] = lon
    writer.variables['lev'][:] = lev
    writer.createVariable("T_per", "d", ("lev", "lat", "lon"))
    expT = [[[0 for i in range(0, column)] for j in range(0, row)] for k in range(0, level)]
    for i in range(0, row):
        for j in range(0, column):
            expT[0][i][j] = ini[i * column + j]
    writer.variables['T_per'][:] = expT


if __name__ == '__main__':
    # print(cosine_similarity(g1, g))  # 1.0
    # normArray = get_norm(read_result())
    # plot(normArray)
    # plot(fcnorm)
    # plot(fvalue)
    # plt.show()
    pca_rc()
